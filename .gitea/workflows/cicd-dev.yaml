name: CI Dev

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v4
      -
        name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: frontend-dist-${{ hashFiles('frontend/package-lock.json', 'frontend/**') }}
          restore-keys: frontend-dist-
      -
        name: Set up Node.js
        if: steps.frontend-cache.outputs.cache-hit != 'true' # 仅在缓存未命中时执行构建
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      -
        name: Set npm Registry
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        run: |
          if [ -n "${{ vars.NPM_REPO }}" ]; then
            npm config set registry ${{ vars.NPM_REPO }}
          fi
      -
        name: Build frontend
        if: steps.cache.outputs.cache-hit != 'true'  
        run: |
          npm ci --prefix frontend
          npm run build --prefix frontend
      -
        name: Save updated cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: frontend-dist-${{ hashFiles('frontend/package-lock.json', 'frontend/**') }}
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v4
      -
        name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: frontend-dist-${{ hashFiles('frontend/package-lock.json', 'frontend/**') }}
      -
        name: Fallback Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          if [ -d "frontend/dist" ]; then
            echo "Using existing dist folder"
          else
            npm ci --prefix frontend
            npm run build --prefix frontend
          fi
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERGITEA_USERNAME }}
          password: ${{ secrets.DOCKERGITEA_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile-Copy-Dist
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/xavier/migadu-bridge:dev
          build-args: |
            APK_REPO=${{ vars.APK_REPO }}
            GOPROXY=${{ vars.GOPROXY }}
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - 
        name: Deploy to server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USERNAME }}
          password: ${{ secrets.SSH_DEV_PASSWORD }}
          port: ${{ secrets.SSH_DEV_PORT }}
          script: |
            docker pull git.zxavier.com/xavier/migadu-bridge:dev && \
            docker stop ${{ vars.DOCKER_NAME_DEV }} || true && \
            docker rm ${{ vars.DOCKER_NAME_DEV }} || true && \
            docker run -d --name ${{ vars.DOCKER_NAME_DEV }} \
              --restart unless-stopped \
              -p ${{ vars.DOCKER_PORT_DEV_1 }}:8080 \
              -p ${{ vars.DOCKER_PORT_DEV_2 }}:8081 \
              -v ${{ vars.DOCKER_V_DEV }}/data:/data \
              -v ${{ vars.DOCKER_V_DEV }}/config:/config \
              git.zxavier.com/xavier/migadu-bridge:dev